org: YOUR_ORG
app: serverless-auth-api
service: serverless-auth-api

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs14.x
  deploymentBucket:
    name: YOUR_S3_BUCKET_NAME
  environment:
    JWT_KEY: YOUR_JWT_KEY_HERE
    DYNAMODB_USERS_TABLE: ${self:service}-users-${sls:stage}
    DYNAMODB_TOKENS_TABLE: ${self:service}-tokens-${sls:stage}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:Get*"
        - "dynamodb:Scan*"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
      Resource: arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-users-${sls:stage}
    - Effect: "Allow"
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:Get*"
        - "dynamodb:Scan*"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
  httpApi:
    authorizers:
      tokenAuthorizer:
        functionName: authorizer
        type: request
        identitySource: $request.header.Authorization
        enableSimpleResponses: true

functions:
  authorizer:
    handler: authorizer.handler

  login:
    handler: login.handler
    events:
      - httpApi:
          path: /users/login
          method: post

resources:
  Resources:

    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        TableName: ${self:service}-users-${sls:stage}

    TokensTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: token
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: token
            KeyType: HASH
        TableName: ${self:service}-tokens-${sls:stage}